{"version":3,"sources":["firebaseRTC.ts","helper.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["roomId","collectionname","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","serverlist","PeerList","user","initdatabase","firebase","apps","length","app","initializeApp","firstPart","Math","random","secondPart","toString","slice","helper","createRoom","messageOut","a","db","firestore","roomRef","collection","doc","localPeerData","name","signal","set","id","console","log","onSnapshot","snapshot","data","exists","metadata","hasPendingWrites","receivePeer","joinRoom","getRoomId","merge","get","then","key","value","Peer","SimplePeer","initiator","config","iceServers","Connected","peer","on","err","signalData","JSON","stringify","Object","entries","parse","send","destroy","onClose","roomSnapshotData","App","add_two_ints","fib","sumResult","fibResult","setSum","setFib","useState","joinstate","setJoinState","setRoomId","message","setMessage","sum","FirebaseRTC","result","string","useEffect","onbeforeunloadFn","window","addEventListener","removeEventListener","className","type","placeholder","onChange","e","target","onClick","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8564e80b.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport SimplePeer from 'simple-peer';\r\nimport * as helper from './helper';\r\n\r\nconst collectionname: string =  \"domRoom\"\r\n// firebase config\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBfoy7wT3avNhSSQePK4V09cyS-h33cbJ0\",\r\n    authDomain: \"anticardgamecardgameclub.firebaseapp.com\",\r\n    projectId: \"anticardgamecardgameclub\",\r\n    storageBucket: \"anticardgamecardgameclub.appspot.com\",\r\n    messagingSenderId: \"493065249415\",\r\n    appId: \"1:493065249415:web:f5849d1ed56dab0e1c8e22\",\r\n    measurementId: \"G-2H0YRN530Y\"\r\n}\r\n\r\n\r\ninterface peerConnection{\r\n  [user: string] : peerConnectionData\r\n}\r\n\r\ninterface peerConnectionData {\r\n  name: string,\r\n  signal: {\r\n    [user: string]: string\r\n\r\n  }\r\n}\r\ninterface PeerListInterface {\r\n  [user: string]: {\r\n    Peer: SimplePeer.Instance,\r\n    Connected: boolean\r\n  }\r\n}\r\n\r\n//the list of stun/turn servers to use\r\nconst serverlist: RTCIceServer[] = [{'urls': 'stun:stun.services.mozilla.com'}, {'urls': 'stun:stun.l.google.com:19302'}, {'urls': 'turn:numb.viagenie.ca','credential': 'eXf5uqiGDie3QHU','username': 'fujizhang2525@gmail.com'}]\r\nlet PeerList: PeerListInterface = {};\r\n\r\nlet roomId: string;\r\n\r\n//user id\r\nlet user: string = \"\";\r\n\r\n/**\r\n * \r\n */\r\nexport function initdatabase() {\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n  } else {\r\n    firebase.app(); // if already initialized, use that one\r\n  }\r\n  //PeerList = {};\r\n  if (user == \"\") user = helper.generateUID();\r\n  return user\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport async function createRoom(messageOut: (n: string)=> void) {\r\n  // create room\r\n  const db = firebase.firestore();\r\n\r\n  const roomRef =  db.collection(collectionname).doc();\r\n  // create and send room\r\n  const localPeerData: peerConnection = {\r\n    [user]: {\r\n      name: \"bruh\",\r\n      signal: {}\r\n    }\r\n  \r\n  }; \r\n  // add user to room \r\n  await roomRef.set(localPeerData);\r\n  roomId = roomRef.id;\r\n  console.log(`New room created with SDP offer. Room ID: ${roomRef.id}  `);\r\n\r\n  // listen for new connections, and send signal data to each\r\n  roomRef.onSnapshot(async snapshot => {\r\n    const data = snapshot.data() as firebase.firestore.DocumentData;\r\n    if (snapshot.exists) {\r\n      var source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n        if(source == \"Server\") {\r\n          await receivePeer(data, roomRef, messageOut)\r\n\r\n        }\r\n    }\r\n   \r\n  });\r\n\r\n  return roomRef.id\r\n}\r\n\r\n/**\r\n * \r\n * @param getRoomId \r\n */\r\nexport async function joinRoom(getRoomId: string, messageOut: (n: string)=> void) {\r\n  const db = firebase.firestore();\r\n\r\n  const roomRef = await db.collection(collectionname).doc(getRoomId);\r\n\r\n  const localPeerData: peerConnection = {\r\n      [user]: {\r\n        name: \"bruh\",\r\n        signal: {}\r\n      }\r\n  };\r\n\r\n  if (roomRef != null) {\r\n    \r\n    // add user to room \r\n    await roomRef.set(localPeerData,{ merge: true })\r\n    console.log(`Joined Room ${roomRef.id}`);\r\n    \r\n    // send connection request to each user in room\r\n    await roomRef.get().then(async function(snapshot){\r\n      let data = snapshot.data() as firebase.firestore.DocumentData ;\r\n      for (const [key, value] of Object.entries(data)) {\r\n        if (key !== user ) {\r\n          PeerList[key] = {\r\n            Peer: new SimplePeer({\r\n            initiator: true,\r\n            config: {\r\n              iceServers: serverlist\r\n            },\r\n            \r\n          }),\r\n          Connected : false\r\n          }\r\n          console.log(\"add peer 1\")\r\n          console.log( PeerList[key] )\r\n          const peer = PeerList[key].Peer\r\n          peer.on('error', err => {\r\n            console.log(err)\r\n          })\r\n         peer.on('signal', signalData => {\r\n            if (!(user in value.signal) ){\r\n              console.log('sent')\r\n              value.signal[user] = JSON.stringify(signalData);\r\n\r\n              roomRef.set({[key]: value},{ merge: true })\r\n            }\r\n            \r\n          })\r\n        }\r\n\r\n      }\r\n     \r\n    })\r\n    \r\n    // listen for new connections\r\n     roomRef.onSnapshot(async snapshot => {\r\n      const data = snapshot.data() as firebase.firestore.DocumentData;\r\n      if (snapshot.exists) {\r\n        var source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n        if(source == \"Server\") {\r\n          await receivePeer(data, roomRef, messageOut)\r\n\r\n        }\r\n       \r\n        }\r\n      });\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nasync function receivePeer(data: peerConnection, roomRef: firebase.firestore.DocumentReference<firebase.firestore.DocumentData>, messageOut: (n: string)=> void) {\r\n  if ((user in data) && Object.entries(data[user].signal).length !== 0) {\r\n\r\n    for (const [key, value] of Object.entries(data[user].signal)) {\r\n      if (key != user) {\r\n\r\n        if (!(key in PeerList)) {\r\n          console.log( PeerList[key] )\r\n\r\n          PeerList[key] = {\r\n            Peer: new SimplePeer({\r\n            initiator: false,\r\n            config: {\r\n              iceServers: serverlist\r\n            },\r\n            \r\n          }),\r\n          Connected : false\r\n          }\r\n          console.log(\"add peer 2\")\r\n          console.log( PeerList[key] )\r\n\r\n          const peer = PeerList[key].Peer\r\n          console.log(PeerList)\r\n          peer.on('error', err => {\r\n            console.log(err)\r\n          })\r\n\r\n          peer.on('signal', signalData => {\r\n\r\n            if (!(user in data[key].signal) ) {\r\n              console.log('return signal')\r\n\r\n              data[key].signal[user] = JSON.stringify(signalData);\r\n              roomRef.set( {[key]: data[key]},{ merge: true })\r\n            }\r\n           \r\n          })\r\n           \r\n        } \r\n          console.log(JSON.parse(data[user].signal[key]))\r\n          \r\n          const peer = PeerList[key].Peer\r\n          \r\n          peer.signal(JSON.parse(data[user].signal[key]))\r\n          console.log(\"connect?\")\r\n\r\n          peer.on('connect', () => {\r\n            console.log(\"connect\")\r\n            peer.send(`hey im ${user}, how is it going?`)\r\n          })\r\n          \r\n          peer.on('data', data => {\r\n            // got a data channel message\r\n            console.log('got a message from peer1: ' + data)\r\n            messageOut(data)\r\n          })\r\n        \r\n          peer.on('close', () => {\r\n            // Delete local ref to player\r\n       \r\n  \r\n            // Delete peer reference\r\n            peer.destroy();\r\n          });\r\n        \r\n        \r\n      }\r\n    }\r\n  }\r\n \r\n}\r\n/**\r\n * \r\n * @param getRoomId \r\n */\r\nexport async function onClose( getRoomId: string) {\r\n  const db = firebase.firestore();\r\n\r\n  const roomRef = db.collection(collectionname).doc(getRoomId)\r\n  \r\n  await roomRef.get().then(async function(snapshot) {\r\n    if (snapshot.exists) {\r\n      let roomSnapshotData = snapshot.data() as  firebase.firestore.DocumentData\r\n        delete roomSnapshotData[user]; \r\n       await roomRef.set(roomSnapshotData);\r\n       console.log(`Left Room ${roomId}`);\r\n    } else {\r\n        // doc.data() will be undefined in this case\r\n        console.log(\"No such document!\");\r\n    }\r\n  })\r\n\r\n\r\n} \r\n\r\n","export function generateUID() {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart:any = (Math.random() * 46656) | 0;\r\n    var secondPart:any = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3) ;\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}","import React , { useState, useEffect } from 'react';\nimport './App.css';\nimport * as FirebaseRTC from './firebaseRTC'\n\nfunction App() {\n  import('rust-wasm').then(({ add_two_ints, fib }) => {\n      // off-loading computations to WASM\n      const sumResult = add_two_ints(10, 20);\n      const fibResult = fib(10);\n      // updating our sumResult and fibResult values (declared below)\n      setSum(sumResult);\n      setFib(fibResult);\n  });\n\n\n   const [joinstate, setJoinState] = useState<string>(\"\");\n   const [roomId, setRoomId] = useState<string>(\"\");\n   const [message, setMessage] = useState<string[]>([]);\n  \n   const [sum, setSum] = useState<number>(0);\n   const [fib, setFib] = useState<number>(0);\n\n   const user = FirebaseRTC.initdatabase()\n\n   async function createBtn() {\n      var result = await FirebaseRTC.createRoom(messageOut);\n      setJoinState(`created room ${result}`)\n      setRoomId(result);\n   }\n\n   async function joinBtn() {\n      if (roomId != \"\") {\n      var result:boolean = await FirebaseRTC.joinRoom(roomId,messageOut);\n      setJoinState(`joined room: ${result ? \"success\": \"fail\"}`)\n      }\n   \n   }\n   async function leaveBtn() {\n      if (roomId != \"\") {\n      FirebaseRTC.onClose(roomId)\n      setJoinState(``)\n      }\n   \n   }\n   function messageOut(string:string) {\n      setMessage([...message, string]);\n   }\n   useEffect(() => {\n\n         const onbeforeunloadFn = () => {\n            console.log(\"ran delete\")\n            FirebaseRTC.onClose(roomId)\n         }\n         window.addEventListener('beforeunload', onbeforeunloadFn);\n\n         return () => window.removeEventListener(\"beforeunload\", onbeforeunloadFn);\n     \n   }, [roomId])\n\n   return (\n      // Displaying our sum and fib values that're updated by WASM\n      <div className=\"App\" >\n         <div>Sum Results: {sum}</div>\n         <div>Fib Results: {fib}</div>\n         {user}\n         <input type=\"text\" placeholder=\"room code\" name=\"name\" onChange={e =>setRoomId(e.target.value)}/>\n         <button onClick={createBtn}>create room</button>\n         <button onClick={joinBtn}>join room</button>\n         <button onClick={leaveBtn}>leave room</button>\n\n         <div>log {joinstate}</div>\n         <div>messages:</div>\n         {message.map(string => (\n            <div>\n               {string}\n            </div>\n         ))}\n\n\n      </div>\n   );\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}